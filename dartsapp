import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Fetch data
url = "https://www.leagueleader.net/sharedreport.php?operatorid=35&code=384bcd97-0045-4547-88bb-5047a43aa13c"
data = pd.read_html(url)[0]  # Assuming the table is the first one on the page

# Data processing
# You may need to clean and format the data according to your requirements

# Display data
st.write(data)

# Visualization
# You can create various plots to visualize the data
# For example, a line chart showing your stats over time

st.subheader('Stats Over Time')
fig, ax = plt.subplots()
# Assuming 'Week' is a column in your DataFrame and 'Stats' is the stat you want to plot
ax.plot(data['Week'], data['Stats'])
ax.set_xlabel('Week')
ax.set_ylabel('Stats')
st.pyplot(fig)

# Assuming 'Week' is a column in your DataFrame and 'Stats' is the stat you want to predict improvement for
X = data[['Week']]
y = data['Stats']

# Split the data into training and testing sets (e.g., 80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
st.write(f'Mean Squared Error: {mse}')

# Predict improvement for the next week
next_week = max(data['Week']) + 1
next_week_pred = model.predict([[next_week]])
st.write(f'Predicted improvement for week {next_week}: {next_week_pred[0]}')
